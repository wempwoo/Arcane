// <auto-generated />
using System;
using ArcaneBackend.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArcaneBackend.Infrastructure.Migrations
{
    [DbContext(typeof(ArcaneDbContext))]
    [Migration("20250307003058_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArcaneBackend.Core.Entities.ArcCircuit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("MachineId")
                        .HasColumnType("uuid");

                    b.Property<int>("ManaTransferRate")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MachineId")
                        .IsUnique();

                    b.ToTable("ArcCircuits");
                });

            modelBuilder.Entity("ArcaneBackend.Core.Entities.ArcMachine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentHp")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentMana")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("EquippedCircuitId")
                        .HasColumnType("uuid");

                    b.Property<int>("ManaCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("ManaGenerationRate")
                        .HasColumnType("integer");

                    b.Property<int>("MaxHp")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("ArcMachines");
                });

            modelBuilder.Entity("ArcaneBackend.Core.Entities.ArcOrb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CastTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ManaCost")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Power")
                        .HasColumnType("integer");

                    b.Property<int>("Range")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SlotId")
                        .IsUnique();

                    b.ToTable("ArcOrbs");
                });

            modelBuilder.Entity("ArcaneBackend.Core.Entities.ArcOrbSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CircuitId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsStartPoint")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrbId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CircuitId", "IsStartPoint")
                        .IsUnique()
                        .HasFilter("\"IsStartPoint\" = true");

                    b.ToTable("ArcOrbSlots");
                });

            modelBuilder.Entity("ArcaneBackend.Core.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("LastLoginAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nickname")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("ArcaneBackend.Core.Entities.SlotConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CircuitId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentSlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NextSlotId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CircuitId");

                    b.HasIndex("NextSlotId");

                    b.HasIndex("CurrentSlotId", "Order")
                        .IsUnique();

                    b.ToTable("SlotConnections");
                });

            modelBuilder.Entity("ArcaneBackend.Core.Entities.ArcCircuit", b =>
                {
                    b.HasOne("ArcaneBackend.Core.Entities.ArcMachine", "Machine")
                        .WithOne("EquippedCircuit")
                        .HasForeignKey("ArcaneBackend.Core.Entities.ArcCircuit", "MachineId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("ArcaneBackend.Core.Entities.ArcMachine", b =>
                {
                    b.HasOne("ArcaneBackend.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ArcaneBackend.Core.Entities.ArcOrb", b =>
                {
                    b.HasOne("ArcaneBackend.Core.Entities.ArcOrbSlot", "Slot")
                        .WithOne("Orb")
                        .HasForeignKey("ArcaneBackend.Core.Entities.ArcOrb", "SlotId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("ArcaneBackend.Core.Entities.ArcOrbSlot", b =>
                {
                    b.HasOne("ArcaneBackend.Core.Entities.ArcCircuit", "Circuit")
                        .WithMany("Slots")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circuit");
                });

            modelBuilder.Entity("ArcaneBackend.Core.Entities.SlotConnection", b =>
                {
                    b.HasOne("ArcaneBackend.Core.Entities.ArcCircuit", "Circuit")
                        .WithMany()
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArcaneBackend.Core.Entities.ArcOrbSlot", "CurrentSlot")
                        .WithMany("NextConnections")
                        .HasForeignKey("CurrentSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArcaneBackend.Core.Entities.ArcOrbSlot", "NextSlot")
                        .WithMany()
                        .HasForeignKey("NextSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("CurrentSlot");

                    b.Navigation("NextSlot");
                });

            modelBuilder.Entity("ArcaneBackend.Core.Entities.ArcCircuit", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("ArcaneBackend.Core.Entities.ArcMachine", b =>
                {
                    b.Navigation("EquippedCircuit")
                        .IsRequired();
                });

            modelBuilder.Entity("ArcaneBackend.Core.Entities.ArcOrbSlot", b =>
                {
                    b.Navigation("NextConnections");

                    b.Navigation("Orb");
                });
#pragma warning restore 612, 618
        }
    }
}
